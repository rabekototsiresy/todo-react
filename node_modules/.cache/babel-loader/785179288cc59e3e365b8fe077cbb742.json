{"ast":null,"code":"import _slicedToArray from \"/home/todisoa/Documents/49tsg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/todisoa/Documents/49tsg/src/components/TodoEditor/index.js\";\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo as _addTodo } from '../../redux';\n\nvar TodoEditor = function TodoEditor(props) {\n  var listTask = props.listTask,\n      addTodo = props.addTodo;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todo = _useState2[0],\n      setTodo = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: todo,\n    placeholder: \"Qu'est ce que vous voulez faire ? \",\n    onChange: function onChange(e) {\n      return setTodo(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"bAdd\",\n    onClick: function onClick() {\n      addTodo(todo);\n      setTodo('');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, \"ADD\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    listTask: state.listTask\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addTodo: function addTodo(todo) {\n      return dispatch(_addTodo(todo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoEditor);","map":{"version":3,"sources":["/home/todisoa/Documents/49tsg/src/components/TodoEditor/index.js"],"names":["React","useState","connect","addTodo","TodoEditor","props","listTask","todo","setTodo","e","target","value","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAO,IAAPA,QAAT,QAAwB,aAAxB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA,MACrBC,QADqB,GACDD,KADC,CACrBC,QADqB;AAAA,MACZH,OADY,GACDE,KADC,CACZF,OADY;;AAAA,kBAEJF,QAAQ,CAAC,EAAD,CAFJ;AAAA;AAAA,MAErBM,IAFqB;AAAA,MAEfC,OAFe;;AAG5B,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,KAAK,EAAED,IAFP;AAGA,IAAA,WAAW,EAAC,oCAHZ;AAIA,IAAA,QAAQ,EAAG,kBAACE,CAAD;AAAA,aAAKD,OAAO,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AAAA,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAQ,IAAA,EAAE,EAAC,MAAX;AAAkB,IAAA,OAAO,EAAE,mBAAI;AAACR,MAAAA,OAAO,CAACI,IAAD,CAAP;AAAeC,MAAAA,OAAO,CAAC,EAAD,CAAP;AAAY,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAPF,CADF;AAWD,CAdD;;AAgBA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAE;AAC7B,SAAM;AACJP,IAAAA,QAAQ,EAAEO,KAAK,CAACP;AADZ,GAAN;AAGD,CAJD;;AAKA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAE;AACnC,SAAM;AACJZ,IAAAA,OAAO,EAAE,iBAACI,IAAD;AAAA,aAAQQ,QAAQ,CAACZ,QAAO,CAACI,IAAD,CAAR,CAAhB;AAAA;AADL,GAAN;AAGD,CAJD;;AAMA,eAAeL,OAAO,CAACU,eAAD,EAAiBE,kBAAjB,CAAP,CAA4CV,UAA5C,CAAf","sourcesContent":["import React,{useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo } from '../../redux'\r\n\r\nconst TodoEditor = (props) => {\r\n  const {listTask,addTodo} = props;\r\n  const [todo, setTodo] = useState('')\r\n  return (\r\n    <div>\r\n      <input \r\n      type=\"text\" \r\n      value={todo} \r\n      placeholder=\"Qu'est ce que vous voulez faire ? \" \r\n      onChange={ (e)=>setTodo(e.target.value)}\r\n      />\r\n      <button id=\"bAdd\" onClick={()=>{addTodo(todo); setTodo('')}}>ADD</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state=>{\r\n  return{\r\n    listTask: state.listTask\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch=>{\r\n  return{\r\n    addTodo: (todo)=>dispatch(addTodo(todo))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoEditor)\r\n"]},"metadata":{},"sourceType":"module"}