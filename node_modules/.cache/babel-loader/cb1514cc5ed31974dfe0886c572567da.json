{"ast":null,"code":"import _objectSpread from \"/home/todisoa/Documents/49tsg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/todisoa/Documents/49tsg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/todisoa/Documents/49tsg/src/components/TodoList/index.js\";\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteTodo, updateTodo, updateCheck } from '../../redux';\nimport ITodo from '../../ITodo';\nimport TodoFinished from '../TodoFinished';\n\nvar TodoList = function TodoList(_ref) {\n  var showModal = _ref.showModal,\n      handleModal = _ref.handleModal;\n  var listTask = useSelector(function (state) {\n    return state.listTask;\n  });\n  var dispatch = useDispatch();\n  var data = {\n    title: ITodo.title,\n    task: ITodo.description,\n    isCompleted: null\n  };\n\n  var _useState = useState(data),\n      _useState2 = _slicedToArray(_useState, 2),\n      taskUpdate = _useState2[0],\n      setTaskUpdate = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkCompleted = _useState4[0],\n      setCheckCompleted = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      update = _useState6[0],\n      setUpdate = _useState6[1];\n\n  var showInputUpdate = function showInputUpdate(id, task, title, isCompleted) {\n    setUpdate(id);\n    data.title = title;\n    data.task = task;\n    data.isCompleted = isCompleted;\n    setTaskUpdate(data);\n  };\n\n  var hanldeUpdate = function hanldeUpdate(id) {\n    dispatch(updateTodo(taskUpdate, id));\n    setUpdate('');\n    setTaskUpdate('');\n  };\n\n  var handleChange = function handleChange(e) {\n    setTaskUpdate(_objectSpread(_objectSpread({}, taskUpdate), {}, {\n      [e.target.id]: e.target.value\n    }));\n  };\n\n  var check = function check(e, id) {\n    var checkValue = e.target.checked;\n    dispatch(updateCheck(id, checkValue)); // setCheckCompleted(e.target.checked)\n    //dispatch(updateTodo(taskUpdate,checkCompleted,id))\n  };\n\n  var title = taskUpdate.title,\n      task = taskUpdate.task,\n      isCompleted = taskUpdate.isCompleted;\n  console.log(listTask);\n  var displayTask = listTask.map(function (todo) {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: todo.id,\n      className: todo.isCompleted && \"isCompleted isFinished\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: function onChange(e) {\n        return check(e, todo.id);\n      },\n      checked: isCompleted,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    })), update == todo.id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"title\",\n      type: \"text\",\n      value: title,\n      onChange: handleChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"task\",\n      type: \"text\",\n      value: task,\n      onChange: handleChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, todo.title), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, todo.task)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, update == todo.id ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        hanldeUpdate(todo.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 10\n      }\n    }, \"Save\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return showInputUpdate(todo.id, todo.task, todo.title, todo.isCompleted);\n      },\n      disabled: todo.isCompleted ? true : false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \"Update\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return dispatch(deleteTodo(todo.id));\n      },\n      disabled: todo.isCompleted ? true : false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, \"Delete\")));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"u\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"List Task\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"mainTable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, \"Todo\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, \"Delete\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, displayTask))), showModal && /*#__PURE__*/React.createElement(TodoFinished, {\n    handleModal: handleModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default TodoList;","map":{"version":3,"sources":["/home/todisoa/Documents/49tsg/src/components/TodoList/index.js"],"names":["React","useState","useSelector","useDispatch","deleteTodo","updateTodo","updateCheck","ITodo","TodoFinished","TodoList","showModal","handleModal","listTask","state","dispatch","data","title","task","description","isCompleted","taskUpdate","setTaskUpdate","checkCompleted","setCheckCompleted","update","setUpdate","showInputUpdate","id","hanldeUpdate","handleChange","e","target","value","check","checkValue","checked","console","log","displayTask","map","todo"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { deleteTodo,updateTodo,updateCheck } from '../../redux';\r\nimport ITodo from '../../ITodo';\r\nimport TodoFinished from '../TodoFinished';\r\n\r\nconst TodoList = ({showModal,handleModal}) => {\r\n  \r\n  const listTask = useSelector( state=>state.listTask)\r\n  const dispatch = useDispatch()\r\n  const data = {\r\n    title: ITodo.title,\r\n    task: ITodo.description,\r\n    isCompleted: null\r\n  }\r\n  const [taskUpdate, setTaskUpdate] = useState(data)\r\n  const [checkCompleted, setCheckCompleted] = useState(null)\r\n\r\n\r\n  const [update, setUpdate] = useState('')\r\n  const showInputUpdate  = (id,task,title,isCompleted)=>{\r\n    setUpdate(id)\r\n    data.title = title\r\n    data.task =task\r\n    data.isCompleted = isCompleted\r\n    \r\n    setTaskUpdate(data)\r\n    \r\n  }\r\n \r\n  const hanldeUpdate = (id)=>{\r\n    \r\n    dispatch(updateTodo(taskUpdate,id))\r\n    \r\n    setUpdate('')\r\n    setTaskUpdate('')\r\n  }\r\n\r\nconst handleChange = (e)=>{\r\n \r\n\r\n  setTaskUpdate({...taskUpdate,[e.target.id]:e.target.value })\r\n}\r\n \r\n\r\nconst check = (e,id)=>{\r\n  const checkValue = e.target.checked;\r\n  dispatch(updateCheck(id,checkValue))\r\n // setCheckCompleted(e.target.checked)\r\n  //dispatch(updateTodo(taskUpdate,checkCompleted,id))\r\n    \r\n\r\n}\r\nconst { title,task,isCompleted } = taskUpdate;\r\n\r\n  console.log(listTask)\r\n  const displayTask = listTask.map(todo=>(\r\n    <tr key={todo.id} className={ todo.isCompleted && `isCompleted isFinished`}>\r\n      <td>\r\n        <input type=\"checkbox\"  onChange={(e)=>check(e,todo.id)} checked={isCompleted} />\r\n      </td>\r\n\r\n      {\r\n        update == todo.id\r\n        ?\r\n        (\r\n\r\n          <>\r\n\r\n          <td>\r\n            <input \r\n            id=\"title\"\r\n            type='text' \r\n            value={title}  \r\n            onChange={handleChange}\r\n            />\r\n          </td>\r\n          <td>\r\n            <input \r\n            id=\"task\"\r\n            type='text' \r\n            value={task}  \r\n            onChange={handleChange}\r\n            />\r\n          </td>\r\n          </>\r\n        )\r\n        :\r\n        (\r\n          <>\r\n            <td>{todo.title}</td>\r\n          <td>{todo.task}</td>\r\n          </>\r\n        )\r\n      }\r\n      <td>\r\n      {\r\n        update == todo.id\r\n        ? \r\n        (<button onClick={()=>{hanldeUpdate(todo.id)}}>\r\n          Save\r\n        </button>)\r\n        :\r\n        (\r\n        <button \r\n        onClick={()=>showInputUpdate(todo.id,todo.task,todo.title,todo.isCompleted)}\r\n        disabled={todo.isCompleted ? true : false}\r\n        >\r\n          Update\r\n        </button>\r\n        )\r\n      }\r\n      </td>\r\n      <td>\r\n        <button \r\n        onClick={()=>dispatch(deleteTodo(todo.id))}\r\n        disabled={todo.isCompleted ? true : false}\r\n        >\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  ))\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h3>\r\n        <u>List Task</u>\r\n      </h3>\r\n      <div id='mainTable'>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Title</th>\r\n              <th>Todo</th>\r\n              <th>Update</th>\r\n              <th>Delete</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {displayTask}\r\n          </tbody>\r\n        </table>\r\n        \r\n      \r\n      </div>\r\n      { showModal && <TodoFinished handleModal={handleModal} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n"]},"metadata":{},"sourceType":"module"}